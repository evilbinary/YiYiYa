# coding:utf-8
# *******************************************************************
# * Copyright 2021-2080 evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.com
# ********************************************************************
import os
import math
import platform 
plt = platform.system()

# arch support x86 arm
# arch='arm'
arch='x86' 
# arch='xtensa'

# board select platform
platform='intel'
# platform='v3s'
# platform='raspi2'
# platform='esp32'

DefaultEnvironment(tools=[])
env = Environment(ENV = {}, tools=['gcc'])


cc_path='/opt/local/bin/'
cc_prefix='i386-elf-'

if plt=='Linux':
    cc_path='/usr/bin/'
    cc_prefix=''
elif plt=='Darwin':
    pass
else:
    print('no support ^_^!')

if arch=='arm':
    cc_prefix='arm-none-eabi-'
elif arch=='xtensa':
    cc_prefix='xtensa-esp32-elf-'
    cc_path='~/.espressif/tools/xtensa-esp32-elf/esp-2021r1-8.4.0/xtensa-esp32-elf/bin/'

gcc= cc_path+cc_prefix
env = Environment(
        APP=True,
        CC = gcc+'gcc',
        LD=gcc+'ld',
        CXX=gcc+'g++',
        AR= gcc+'ar',
        STRIP=gcc+"strip",
        RANLIB=gcc+'ranlib',
        OBJCOPY=gcc+'objcopy',
        AS=gcc+'as',
        CFLAGS=' -DX86 -march=i486 -I. -I./include -Ilibs/include -g -nostdlib -nostdinc  -fno-builtin -m32 -c -std=c99 -std=gnu99 -w -D'+platform.upper(),
        #PATH= os.environ['PATH'],
        LIBPATH=['.','../arch/','../driver','../libs/'],
        LINKFLAGS='-nostdlib -nostartfiles -e start  -g ',
        OBJCOPYFLAGS='-S -g',
        ARCH=arch,
        PLATFORM=platform,
        LINKLD='link.ld',
        MYLIB=None,
        LIBC=['../../libs/libc/libc.a','../../libs/libalgorithm/libalgorithm.a'],
        LIBCFLAGS='-Ilibs/include/c/ -DLIBYC',
        # LIBC=['../../app/libmusl/lib/libc.a'],
        # LIBCFLAGS=' -Iapp/libmusl/include/ -Iapp/libmusl/obj/include/ -Iapp/libmusl/arch/generic/ -Iapp/libmusl/arch/arm/ ',
        USER='--entry main -Tuser.ld'
        )

if plt=='Linux':
    env['LINKFLAGS']= env['LINKFLAGS']+' -m32'
    env['CFLAGS']= env['CFLAGS']+' -no-pie -fno-pic '
    pass

if arch=='arm':
    env['APP']=True
    env['USER']='--entry main -Tuser-arm.ld'
    env['MYLIB']= '/opt/local/lib/gcc/arm-none-eabi/9.2.0/libgcc.a'
    env['CFLAGS']='-march=armv7-a  -mfloat-abi=softfp  -DARM -I. -I./include  -Ilibs/include -g -nostdlib -nostdinc -fno-builtin -c -std=c99 -std=gnu99 -w  -D'+platform.upper() # -DMALLOC_TRACE -mcpu=cortex-a7  -mtune=cortex-a7 -mfpu=vfpv4 -mfloat-abi=hard 
    #env['CFLAGS']= env['CFLAGS']+ ' -fno-omit-frame-pointer -mapcs -mno-sched-prolog ' #for debug backtrace
    if platform=='raspi2':   
        pass
    elif platform=='v3s':
        env['USER']='--entry main -Tuser-v3s.ld'
        env['LINKLD']='link-v3s.ld'
elif arch=='xtensa':
    env['APP']=False
    env['CFLAGS']='-DXTENSA -I. -I./include  -Ilibs/include -g -nostdlib -nostdinc -fno-builtin -c -std=c99 -std=gnu99 -w  -D'+platform.upper()
    env['LINKLD']='link-esp32.ld'
    pass


def generate_bin(source, target, env, for_signature):
    return '$OBJCOPY %s %s %s'%(env['OBJCOPYFLAGS'],source[0], target[0])
    
env.Append(BUILDERS={
    'Objcopy': Builder(
               generator=generate_bin,
               suffix='',)})

def get_kernel_size(env,target,source):
    file_name=str(source[0])
    file_out=str(target[0])
    if os.path.exists(file_name):
        size=os.stat(file_name).st_size
        env['KERNEL_SIZE'] = str(size)
        env['KERNEL_BLOCK_SIZE'] = str(int(math.ceil(size/1024.0)))
        print('kernel size:',env.get('KERNEL_SIZE'))
    else :
        print('file %s not exist'%(file_name))
    return ''

def generate_kernel_size(env,target,source):
    file_name=str(source[0])
    file_out=str(target[0])
    get_kernel_size(env,target,source)
    kernel_header=file_out.upper().rsplit('/',1)[-1].replace('.','_')
    f = open(file_out, 'w')
    content="""#ifndef %s
#define %s
#define KERNEL_BLOCK_SIZE %s
#define KERNEL_SIZE %s
#endif
"""%(kernel_header,
    kernel_header,
    env.get('KERNEL_BLOCK_SIZE'),
    env.get('KERNEL_SIZE'))
    f.write(content)
    f.close()
    return ''

env.Append(BUILDERS={
    'GenerateKernelSize': Builder(
               action=generate_kernel_size
               ),
    'KernelSize': get_kernel_size
               })

Export('env')

SConscript(dirs=['libs/libalgorithm'], exports='env')
SConscript(dirs=['platform'], exports='env')
SConscript(dirs=['arch'], exports='env')
SConscript(dirs=['kernel'], exports='env')
SConscript(dirs=['libs/libkernel'], exports='env')
SConscript(dirs=['drivers'], exports='env')
kernel=SConscript(dirs=['init'], exports='env')


boot=SConscript(dirs=['boot/'+arch], exports='env')
Depends(boot, kernel)

image=SConscript(dirs=['image'], exports='env')
Depends(image, kernel)


SConscript(dirs=['libs/libc'], exports='env')
app=SConscript(dirs=['app'], exports='env')



